registered
//make sure they provide email and p 
//email hasnt been registered
//protect user information
//create the user

password encryption
//hashing Algorithms
//salting Algorithms


login
email and password
user has already been registered
provide the correct email and password

refactoring 
error handling
mongoose hooks(middleware)

authentication(session based and token based )protecting route using authentication
integrating ejs views

//set cookies
app.get('/examples', (req, res)=>{
    res.cookie('isAdmin', true);
    res.cookie('another', false, {maxage: 24*60*60*1000, secure: true, httpOnly: true});

    res.send('cookie set')
});

app.get('/get', (req, res)=>{
    const cookies = req.cookies;
    const {isAdmin} = cookies;
    res.json(cookies);
});


// const checkCurrentUser= (req, res, next)=>{
//     const token = req.cookies.jwt;
//     if (token){
//         jwt.verify(token, process.env.JWT_SECRET, async (err, decodedToken) => {
//             if(err){
//                 res.locals.email = null
//             }else{
//                 const user = await Users.findById(decodedToken.id)
//                 res.locals.email= user.email
//                 res.locals.dami = 'Damilare'
//                 next();
//             }
//         })
//     }else{
//         res.locals.email = null
//     }
// }
